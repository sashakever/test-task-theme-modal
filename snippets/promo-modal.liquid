{% comment %}
  Renders promo modal

  Accepts:
  - product: {Object} main product
  - products: {Object} additional products
  - heading: {String} Heading text
  - add_to_cart: {String} Add to cart text
  - save_price_label: {String} Save price label text
  - product_title_before: {String} Product title before text
  - product_title_after: {String} Product title after text
  - continue_to_cart: {String} Continue to cart text
  - image: {Image} Modal image
  - once: {Boolean} Show only once per customer

  Usage:
  {% render 'promo-modal', product: product, products: products, heading: "heading", show_image: true, once: true %}
{% endcomment %}

<cta-modal id="promo-modal" active="false" once="{{ once }}" style="display: none">

    <div slot="modal" class="lg:tw-h-[518px] tw-border tw-border-base-200 tw-p-5 lg:tw-p-10 tw-flex tw-flex-col lg:tw-flex-row tw-gap-5 tw-m-5 tw-font-inter">
        {% if image != blank %}
            <div class="tw-relative tw-size-full lg:tw-w-[417px] tw-aspect-[1.5] lg:tw-aspect-[0.95] tw-flex tw-flex-1">
                <img
                    src="{{ image | image_url }}"
                    alt="{{ product.title }}"
                    class="tw-absolute tw-top-0 tw-left-0 tw-size-full tw-object-cover lg:tw-object-top"
                >
            </div>
        {% endif %}
        <div class="tw-size-full lg:tw-w-[417px] lg:tw-h-full lg:tw-aspect-[0.95] tw-flex tw-flex-col tw-justify-between tw-gap-8 tw-shrink-0">
            <h3 class="tw-w-[90%] tw-text-[24px] tw-text-left tw-text-blue-500 tw-font-bold tw-font-inter tw-m-0">{{ heading }}</h3>
            <div>
                <p class="tw-text-[14px] tw-font-normal tw-leading-tight tw-text-left tw-text-base-800 tw-m-0">
                    {{ product_title_before }} <span class="tw-text-[20px] tw-font-bold tw-leading-none">
                        {{ product.title }}
                    </span> {{ product_title_after }}
                </p>
                {% if save_price > 0 %}
                    <p class="tw-text-[14px] tw-font-normal tw-leading-tight tw-text-left tw-m-0">
                        {{ save_price_label }} <span class="tw-text-[18px] tw-font-bold tw-leading-tight">
                            {{ cart.currency.symbol }} {{ save_price }}!
                        </span>
                    </p>
                {% endif %}
            </div>
            <div class="tw-flex-1 tw-overflow-y-auto tw-flex tw-flex-col tw-gap-5">
                {% for product_item in products %}
                    {% render 'product-item', product: product_item %}
                {% endfor %}
            </div>
            <div class="tw-w-full tw-flex tw-flex-col lg:tw-flex-row tw-gap-2.5">
                <button
                    id="add-to-cart-{{ section.id }}"
                    class="tw-button tw-text-base-250 tw-bg-blue-500 tw-font-bold tw-shrink-0"
                    type="submit">
                    {{ add_to_cart }}
                </button>
                <button
                    id="continue-to-cart-{{ section.id }}"
                    class="tw-w-full tw-button tw-border tw-border-blue-500 tw-text-blue-500 tw-font-medium">
                    {{ continue_to_cart }}
                </button>
            </div>
        </div>
    </div>

</cta-modal>

<script>

    const mainProductId = "{{ product.selected_or_first_available_variant.id }}";
    const products = [];
    for (let productEl of document.querySelectorAll('[data-product-id]')) {
        products.push({
            id: productEl.getAttribute('data-product-id'),
            quantity: 1
        });
    }
    const cartCountElement = document.querySelector('.cart-count-bubble span');
    const promoModal = document.getElementById('promo-modal');

    const closeModal = () => {
        if (promoModal) {
            promoModal.setAttribute('active', 'false');
        }
    }

    const updateCart = () => {
        fetch(`/cart.js`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json'
            },
        })
            .then(response => {
                console.log(response.status);
                return response.json();
            })
            .then(data => {
                const count = data?.items?.reduce((acc, item) => acc + item.quantity, 0);
                if (cartCountElement) {
                    cartCountElement.innerHTML = count;
                }
            })
            .catch((error) => {
                console.error('Error:', error);
            })
    }

    const makeRequest = (body) => {
        fetch(`${routes.cart_add_url}.js`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({items: body})
        })
            .then(response => response.json())
            .then(() => {
                updateCart();
            })
            .catch((error) => {
                console.error('Error:', error);
            })
            .finally(() => {
                closeModal();
            });
    }

    const addToCartButton = document.getElementById('add-to-cart-{{ section.id }}');
    if (addToCartButton) {
        addToCartButton.addEventListener('click', () => {
            makeRequest([{id: mainProductId, quantity: 1}, ...products]);
        });
    }

    const continueToCartButton = document.getElementById('continue-to-cart-{{ section.id }}');
    if (continueToCartButton) {
        continueToCartButton.addEventListener('click', () => {
            makeRequest([{id: mainProductId, quantity: 1}]);
        });
    }

</script>
